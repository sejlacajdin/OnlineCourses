// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineCourseApp.WebAPI.Database;

namespace OnlineCourseApp.WebAPI.Migrations
{
    [DbContext(typeof(_160065Context))]
    partial class _160065ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Bosnian_Latin_100_BIN")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementOwnerID");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilterTypeId")
                        .HasColumnType("int")
                        .HasColumnName("FilterTypeID");

                    b.Property<string>("PostOwner")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("AnnouncementOwnerId");

                    b.HasIndex("FilterTypeId");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.AnnouncementFilter", b =>
                {
                    b.Property<int>("AnnouncementFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementFilterID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementID");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int?>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("CourseSectionID");

                    b.Property<int?>("CourseTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CourseTypeID");

                    b.HasKey("AnnouncementFilterId");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseSectionId");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("AnnouncementFilter");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.AnnouncementFilterType", b =>
                {
                    b.Property<int>("AnnouncementFilterTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AnnouncementFilterTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementFilterTypeId");

                    b.ToTable("AnnouncementFilterType");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Choice", b =>
                {
                    b.Property<int>("ChoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChoiceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ChoiceId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choice");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CourseSectionId")
                        .HasColumnType("int")
                        .HasColumnName("CourseSectionID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("NumOfRatings")
                        .HasColumnType("int");

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PictureThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int")
                        .HasColumnName("ProfessorID");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseSectionId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.CourseParticipant", b =>
                {
                    b.Property<int>("CourseParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseParticipantID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("ParticipationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Review")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("CourseParticipantId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseParticipant");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.CourseSection", b =>
                {
                    b.Property<int>("CourseSectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseSectionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseParentId")
                        .HasColumnType("int")
                        .HasColumnName("CourseParentID");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CourseTypeID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CourseSectionId");

                    b.HasIndex("CourseParentId");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("CourseSection");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.CourseType", b =>
                {
                    b.Property<int>("CourseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RecordUpdated")
                        .HasColumnType("datetime");

                    b.HasKey("CourseTypeId");

                    b.ToTable("CourseType");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileExstension")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileOldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DocumentId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.DocumentDownloaded", b =>
                {
                    b.Property<int>("DocumentDownloadedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentDownloadedID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DocumentShareId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentShareID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("DocumentDownloadedId");

                    b.HasIndex("DocumentShareId");

                    b.HasIndex("StudentId");

                    b.ToTable("DocumentDownloaded");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.DocumentShare", b =>
                {
                    b.Property<int>("DocumentShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DocumentShareID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("DocumentID");

                    b.HasKey("DocumentShareId");

                    b.HasIndex("CourseId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentShare");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExamID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("ExamOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("ExamOwnerID");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("TimeLimit")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ExamId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ExamOwnerId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.ExamAnsweredQuestion", b =>
                {
                    b.Property<int>("ExamAnsweredQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExamAnsweredQuestionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ChoiceId")
                        .HasColumnType("int")
                        .HasColumnName("ChoiceID");

                    b.Property<double>("MarkScored")
                        .HasColumnType("float");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("ExamAnsweredQuestionId");

                    b.HasIndex("ChoiceId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExamAnsweredQuestion");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("ExamID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Points")
                        .HasColumnType("float");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionCategoryID");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionTypeID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("QuestionId");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionCategoryId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.QuestionCategory", b =>
                {
                    b.Property<int>("QuestionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuestionCategoryId");

                    b.ToTable("QuestionCategory");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionTypeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.TransactionPayment", b =>
                {
                    b.Property<int>("TransactionPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionPaymentID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("TransactionPaymentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("TransactionPayment");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "CS_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "CS_Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.UserLog", b =>
                {
                    b.Property<int>("UserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserLogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLog");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.UserRole", b =>
                {
                    b.Property<int>("UserRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRolesID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("RecordUpdated")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRolesId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Video", b =>
                {
                    b.Property<int>("VideoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VideoID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("VideoId");

                    b.HasIndex("CourseId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Announcement", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "AnnouncementOwner")
                        .WithMany("Announcements")
                        .HasForeignKey("AnnouncementOwnerId")
                        .HasConstraintName("FK_AnnouncementOwner_Announcement")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.AnnouncementFilterType", "FilterType")
                        .WithMany("Announcements")
                        .HasForeignKey("FilterTypeId")
                        .HasConstraintName("FK_FilterType_Announcement")
                        .IsRequired();

                    b.Navigation("AnnouncementOwner");

                    b.Navigation("FilterType");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.AnnouncementFilter", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Announcement", "Announcement")
                        .WithMany("AnnouncementFilters")
                        .HasForeignKey("AnnouncementId")
                        .HasConstraintName("FK_Announcement_AnnouncementFilter")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.Course", "Course")
                        .WithMany("AnnouncementFilters")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Course_AnnouncementFilter");

                    b.HasOne("OnlineCourseApp.WebAPI.Database.CourseSection", "CourseSection")
                        .WithMany("AnnouncementFilters")
                        .HasForeignKey("CourseSectionId")
                        .HasConstraintName("FK_CourseSection_AnnouncementFilter");

                    b.HasOne("OnlineCourseApp.WebAPI.Database.CourseType", "CourseType")
                        .WithMany("AnnouncementFilters")
                        .HasForeignKey("CourseTypeId")
                        .HasConstraintName("FK_CourseType_AnnouncementFilter");

                    b.Navigation("Announcement");

                    b.Navigation("Course");

                    b.Navigation("CourseSection");

                    b.Navigation("CourseType");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Choice", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Question_Choice")
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Course", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.CourseSection", "CourseSection")
                        .WithMany("Courses")
                        .HasForeignKey("CourseSectionId")
                        .HasConstraintName("FK_CourseSection_Course")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "Professor")
                        .WithMany("Courses")
                        .HasForeignKey("ProfessorId")
                        .HasConstraintName("FK_Professor_Course")
                        .IsRequired();

                    b.Navigation("CourseSection");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.CourseParticipant", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Course", "Course")
                        .WithMany("CourseParticipants")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Course_CourseParticipant")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "Student")
                        .WithMany("CourseParticipants")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_CourseParticipant")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.CourseSection", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.CourseSection", "CourseParent")
                        .WithMany("InverseCourseParent")
                        .HasForeignKey("CourseParentId")
                        .HasConstraintName("FK_CourseParent_CourseSection");

                    b.HasOne("OnlineCourseApp.WebAPI.Database.CourseType", "CourseType")
                        .WithMany("CourseSections")
                        .HasForeignKey("CourseTypeId")
                        .HasConstraintName("FK_CourseType_CourseSection")
                        .IsRequired();

                    b.Navigation("CourseParent");

                    b.Navigation("CourseType");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.DocumentDownloaded", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.DocumentShare", "DocumentShare")
                        .WithMany("DocumentDownloadeds")
                        .HasForeignKey("DocumentShareId")
                        .HasConstraintName("FK_DocumentShare_DocumentDownloaded")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "Student")
                        .WithMany("DocumentDownloadeds")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_DocumentDownloaded")
                        .IsRequired();

                    b.Navigation("DocumentShare");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.DocumentShare", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Course", "Course")
                        .WithMany("DocumentShares")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Course_DocumentShare")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.Document", "Document")
                        .WithMany("DocumentShares")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_Document_DocumentShare")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Exam", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Course_Exam")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "ExamOwner")
                        .WithMany("Exams")
                        .HasForeignKey("ExamOwnerId")
                        .HasConstraintName("FK_ExamOwner_Exam")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ExamOwner");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.ExamAnsweredQuestion", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Choice", "Choice")
                        .WithMany("ExamAnsweredQuestions")
                        .HasForeignKey("ChoiceId")
                        .HasConstraintName("FK_Choice_ExamAnsweredQuestion")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.Question", "Question")
                        .WithMany("ExamAnsweredQuestions")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK_Question_ExamAnsweredQuestion")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "Student")
                        .WithMany("ExamAnsweredQuestions")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_ExamAnsweredQuestion")
                        .IsRequired();

                    b.Navigation("Choice");

                    b.Navigation("Question");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Question", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Exam", "Exam")
                        .WithMany("Questions")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_Exam_Question")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.QuestionCategory", "QuestionCategory")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionCategoryId")
                        .HasConstraintName("FK_QuestionCategory_Question")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .HasConstraintName("FK_QuestionType_Question")
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("QuestionCategory");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.TransactionPayment", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Course", "Course")
                        .WithMany("TransactionPayments")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_TransactionPayment_Course")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "Student")
                        .WithMany("TransactionPayments")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_TransactionPayment_Student")
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.UserLog", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "User")
                        .WithMany("UserLogs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_UserLog")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.UserRole", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Role_UserRoles")
                        .IsRequired();

                    b.HasOne("OnlineCourseApp.WebAPI.Database.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_UserRoles")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Video", b =>
                {
                    b.HasOne("OnlineCourseApp.WebAPI.Database.Course", "Course")
                        .WithMany("Videos")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Video_Course")
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Announcement", b =>
                {
                    b.Navigation("AnnouncementFilters");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.AnnouncementFilterType", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Choice", b =>
                {
                    b.Navigation("ExamAnsweredQuestions");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Course", b =>
                {
                    b.Navigation("AnnouncementFilters");

                    b.Navigation("CourseParticipants");

                    b.Navigation("DocumentShares");

                    b.Navigation("Exams");

                    b.Navigation("TransactionPayments");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.CourseSection", b =>
                {
                    b.Navigation("AnnouncementFilters");

                    b.Navigation("Courses");

                    b.Navigation("InverseCourseParent");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.CourseType", b =>
                {
                    b.Navigation("AnnouncementFilters");

                    b.Navigation("CourseSections");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Document", b =>
                {
                    b.Navigation("DocumentShares");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.DocumentShare", b =>
                {
                    b.Navigation("DocumentDownloadeds");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Exam", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Question", b =>
                {
                    b.Navigation("Choices");

                    b.Navigation("ExamAnsweredQuestions");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.QuestionCategory", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OnlineCourseApp.WebAPI.Database.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("CourseParticipants");

                    b.Navigation("Courses");

                    b.Navigation("DocumentDownloadeds");

                    b.Navigation("ExamAnsweredQuestions");

                    b.Navigation("Exams");

                    b.Navigation("TransactionPayments");

                    b.Navigation("UserLogs");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
